// Generated by view binder compiler. Do not edit!
package com.example.aniglory_app.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.aniglory_app.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BookmarksSelectionBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final Button abandoned;

  @NonNull
  public final Button plane;

  @NonNull
  public final Button postponed;

  @NonNull
  public final TextView textView6;

  @NonNull
  public final Button watched;

  @NonNull
  public final Button watching;

  private BookmarksSelectionBinding(@NonNull CardView rootView, @NonNull Button abandoned,
      @NonNull Button plane, @NonNull Button postponed, @NonNull TextView textView6,
      @NonNull Button watched, @NonNull Button watching) {
    this.rootView = rootView;
    this.abandoned = abandoned;
    this.plane = plane;
    this.postponed = postponed;
    this.textView6 = textView6;
    this.watched = watched;
    this.watching = watching;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static BookmarksSelectionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BookmarksSelectionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.bookmarks_selection, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BookmarksSelectionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.abandoned;
      Button abandoned = ViewBindings.findChildViewById(rootView, id);
      if (abandoned == null) {
        break missingId;
      }

      id = R.id.plane;
      Button plane = ViewBindings.findChildViewById(rootView, id);
      if (plane == null) {
        break missingId;
      }

      id = R.id.postponed;
      Button postponed = ViewBindings.findChildViewById(rootView, id);
      if (postponed == null) {
        break missingId;
      }

      id = R.id.textView6;
      TextView textView6 = ViewBindings.findChildViewById(rootView, id);
      if (textView6 == null) {
        break missingId;
      }

      id = R.id.watched;
      Button watched = ViewBindings.findChildViewById(rootView, id);
      if (watched == null) {
        break missingId;
      }

      id = R.id.watching;
      Button watching = ViewBindings.findChildViewById(rootView, id);
      if (watching == null) {
        break missingId;
      }

      return new BookmarksSelectionBinding((CardView) rootView, abandoned, plane, postponed,
          textView6, watched, watching);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
